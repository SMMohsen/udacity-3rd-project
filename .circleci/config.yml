version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
           cd frontend
           npm install
           npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
           cd frontend
           npm install
           npm run test
                
  test-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
           cd backend
           npm install
           npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Scan front-end
          command: |
           cd frontend
           npm install
           npm audit fix --audit-level=critical --force
           npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Scan back-end
          command: |
           cd backend
           npm install
           npm audit fix --audit-level=critical --force
           npm audit --audit-level=critical 
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run: 
          name: create backend infra
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run: 
          name: create fromtend infra
          command: |
           aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-fromtend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: create inventory file
          command: |
            touch /tmp/inventory.txt
            echo -e "[all]"> /tmp/inventory.txt 
      - run:
          name: get DNS name
          command: | 
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicDnsName' \
            --output text >> /tmp/inventory.txt
            cat /tmp/inventory.txt
      - persist_to_workspace:
          root: /tmp
          paths:
            - inventory.txt
    
  configure-infrastructure:
    docker:
      - image: python
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - add_ssh_keys:
          fingerprints: 
            - 90:50:da:a8:28:a1:b8:03:1c:a0:29:e2:8a:c9:40:21
      - run:
          name: install ansible
          command: |
            python3 -m pip install --user ansible
            python3 -m pip install --user --upgrade ansible
            ansible --version
      - run:
          name: run anisble playbook
          command: |
            cd .circleci/ansible
            ansible-playbook -i /tmp/inventory.txt configure-server.yml

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |   
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
            # If you are using kvdb.io, generate the bucket ID "3zmhpmT3JBLitS6uzdVdFV" in your local terminal first
            curl https://kvdb.io/93zmhpmT3JBLitS6uzdVdFV/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: install python
          command: |
            sudo apt install python3.9
            python3.9 --version
      - run:
          name: install node
          command: |
            sudo apt-get install curl
            curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash - &&\
            sudo apt-get install nodejs
            node -v 
      - run: 
          name: get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: deploy frontend
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

  

        
         

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - deploy-infrastructure
      - configure-infrastructure:
          requires:
            - deploy-infrastructure