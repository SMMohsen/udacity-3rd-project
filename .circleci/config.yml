version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
          type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name hatem-udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name hatem-udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
          type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl https://kvdb.io/93zmhpmT3JBLitS6uzdVdFV/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
            cd ~/project/backend
            then
            cd backend
            npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
           cd frontend
           npm install
           npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
           cd frontend
           npm install
           npm run test
                
  test-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
           cd backend
           npm install
           npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan-frontend
          working_directory: ./frontend
          command: |
            npm i
            npm audit fix --audit-level=critical --force
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan-backend
          working_directory: ./backend
          command: |
            npm install
            npm install --save-dev webpack@5.74.0
            npm update path-parse --depth 3
            npm update mkdirp --depth 6
            npm audit fix --audit-level=critical --force
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run: 
          name: create backend infra
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run: 
          name: create fromtend infra
          command: |
           aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-fromtend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: create inventory file
          command: |
            touch /tmp/inventory.txt
            echo -e "[all]"> /tmp/inventory.txt 
      - run:
          name: get DNS name
          command: | 
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicDnsName' \
            --output text >> /tmp/inventory.txt
            cat /tmp/inventory.txt
      - persist_to_workspace:
          root: /tmp
          paths:
            - inventory.txt
    
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - add_ssh_keys:
          fingerprints: 
            - 90:50:da:a8:28:a1:b8:03:1c:a0:29:e2:8a:c9:40:21
      - run:
            name: Install dependencies
            command: |
              apk add curl
              apk add --upgrade bash
              apk add --update ansible
              apk add openssh-client
              pip3 install awscli
      - run:
          name: run anisble playbook
          command: | 
            cd .circleci/ansible
            ansible-playbook -i /tmp/inventory.txt configure-server.yml

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |   
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
            # If you are using kvdb.io, generate the bucket ID "3zmhpmT3JBLitS6uzdVdFV" in your local terminal first
            curl https://kvdb.io/93zmhpmT3JBLitS6uzdVdFV/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi

  deploy-frontend:
    docker:
      - image: node:16.19.0-alpine
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run: 
          name: get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: install dependencies
          command: |
            apk add --no-cache aws-cli
      - run:
          name: deploy frontend
          command: |
            cd frontend
            npm install
            npm update
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
  
  deploy-backend:
     docker:
      - image: python:3.7-alpine3.11
     steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - add_ssh_keys:
          fingerprints: 
            - 90:50:da:a8:28:a1:b8:03:1c:a0:29:e2:8a:c9:40:21
      - run:
            name: Install dependencies
            command: |
              apk add curl
              apk add --upgrade bash
              apk add --update ansible
              apk add openssh-client
              pip3 install awscli
              apk add --update nodejs npm
      - run:
          name: run anisble playbook
          command: | 
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat /tmp/inventory.txt
            ansible-playbook -i /tmp/inventory.txt deploy-backend.yml
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - run:
          name: Install dependencies
          command: |
            apk add curl
            apk add --upgrade bash
            apk add --update ansible
            apk add openssh-client
            pip3 install awscli
            apk add --update nodejs npm
      - run:
          name: run backend test
          command: | 
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: run frontend test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: change cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
  
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: query cloudformation
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"   
      - run:
          name: delete old stack
          command: |
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
            then
            aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
            return 0
            fi       

  


      

  

        
         

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - deploy-infrastructure
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-frontend:
          requires:
            - configure-infrastructure
      - deploy-backend:
          requires:
            - configure-infrastructure
      - smoke-test:
          requires:
            - deploy-backend
            - deploy-frontend